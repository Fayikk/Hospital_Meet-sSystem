@page "/meetDate/{doctorId:int}"
@using Eksim_Bootcamp.Client.Services.MeetServices;
@using Eksim_Bootcamp.Shared;
@inject IMeetService _meetService
@inject NavigationManager _navigationManager

<EditForm Model="meet" OnValidSubmit="CreateMeets">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="mb-3" style="display:none">
        <label for="doctorId">Randevu alınacak Doktor</label>
        <InputNumber @bind-Value="meet.DoctorId" class="form-control"></InputNumber>
        <ValidationSummary For="@(() => meet.DoctorId)"></ValidationSummary>
    </div>

    <div class="mb-3">
        <label for="dateInput">Tarih bilgisini Giriniz</label>
        <input type="date" id="dateInput" @bind="@meet.MeetDate" class="form-control" min="@DateTime.Today.ToString("yyyy-MM-dd")" />
        <ValidationMessage For="@(() => meet.MeetDate)" />
    </div> 

    <div class="mb-3">
        <label for="timeInput">Saat bilgisini Giriniz</label>
        <select id="timeInput" @bind="@meet.MeetTime" class="form-control">
            @for (int i = 8; i < 17; i++)
            {
                for (int j = 0; j < 60; j += 30)
                {
                    TimeSpan time = new TimeSpan(i, j, 0);
                    <option value="@time">@time.ToString("hh\\:mm")</option>
                }
            }
        </select>
        <ValidationMessage For="@(() => meet.MeetTime)" />
    </div>

    <div class="mb-3">
        <button type="submit" class="btn btn-primary">Save</button>

    </div>

</EditForm>


@code {
    [Parameter]
    public int doctorId { get; set; }
    Meet meet = new Meet();

    private async Task CreateMeets()
    {
        meet.DoctorId = doctorId;
        await _meetService.CreateMeet(meet);
        _navigationManager.NavigateTo("");
    }

    //protected override async Task OnParametersSetAsync()
    //{
    //    await _doctorService.GetDoctor(poliId);
    //}

}
